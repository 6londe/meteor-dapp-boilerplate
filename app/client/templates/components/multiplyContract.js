/**
Template Controllers

@module Templates
*/

/**
The multiply contract template

@class [template] components_multiplyContract
@constructor
*/

// solidity source code
var source = "" + 
"contract test {\n" +
"   function multiply(uint a) returns(uint d) {\n" +
"       return a * 7;\n" +
"   }\n" +
"}\n";

// contract hex code
var code = "6060604052606d8060116000396000f30060606040526000357c010000000000000000000000000000000000000000000000000000000090048063c6888fa1146037576035565b005b6046600480359060200150605c565b6040518082815260200191505060405180910390f35b60006007820290506068565b91905056";

// contract abiArray, this will be autogenerated somehow
var abiArray = [  
   {  
      "constant":false,
      "inputs":[  
         {  
            "name":"a",
            "type":"uint256"
         }
      ],
      "name":"multiply",
      "outputs":[  
         {  
            "name":"d",
            "type":"uint256"
         }
      ],
      "type":"function"
   }
];

// Construct Multiply Contract Object and contract instance
var MultiplyContract,
    watch,
    contractMined = false,
    contract;

// When the template is rendered
Template['components_multiplyContract'].rendered = function(){
    TemplateVar.set('state', {isInactive: true});
};

Template['components_multiplyContract'].helpers({

	/**
	Get multiply contract source code.
	
	@method (source)
	*/

	'source': function(){
		return source;
	},
});

Template['components_multiplyContract'].events({

	/**
	On "Create New Contract" click
	
	@event (click .btn-default)
	*/

	"click .btn-default": function(event, template){ // Create Contract
        TemplateVar.set('state', {isMining: true});
        
        // Set coinbase as the default account
        web3.eth.defaultAccount = web3.eth.coinbase;
        
        // Watch Filter
        watch = web3.eth.filter('latest');
        
        // Setup MultiplyContract object
        MultiplyContract = web3.eth.contract(abiArray);
        
        // Deploy new MultiplyContract instance to the Ethereum blockchain
        MultiplyContract.new({data: code, gas: 300000, from: web3.eth.accounts[0]}, function(err, contractInstance){
            if(err) {
                TemplateVar.set(template, 'state', {isError: true, error: String(err)});
                return;
            }
            
            contract = contractInstance;            
            watch.watch(function (err, hash) {
                var block = web3.eth.getBlock(hash, true); 
                contractMined = block.transactions.reduce(function (mined, th) {
                    // TODO: compiled code do not have 0x prefix
                    return mined || (th.from === web3.eth.defaultAccount && th.input.indexOf(code) !== -1);
                }, false);
                
                if (contractMined)
                    TemplateVar.set(template, 'state', {isMined: true, address: contract.address, source: source});
            });
        });
	},

	/**
	On Multiply Number Input keyup
	
	@event (keyup #multiplyValue)
	*/

	"keyup #multiplyValue": function(event, template){ // Call Contract
		var value = template.find("#multiplyValue").value;  
        
		contract.multiply.call(value, function(err, result){
            TemplateVar.set(template, 'multiplyResult'
                            , result.toNumber(10));
            
            if(err)
                TemplateVar.set(template, 'multplyResult'
                                , String(err));
        }); // Call Contract and Multply Given Value
	},
});
